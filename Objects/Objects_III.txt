#include "plugin.h"
#include "InputManager.h"
#include "CObject.h"
#include "CWorld.h"
#include "RenderWare.h"
#include "CTheScripts.h"
#include "CModelInfo.h"
using namespace plugin;

class Objects {
public:
    Objects() {
        // Initialise your plugin here
        if (AllocConsole())
        {
            freopen("CONIN$", "r", stdin);
            freopen("CONOUT$", "w", stdout);
            freopen("CONOUT$", "w", stderr);
        }

        Events::initGameEvent += [&]
        {
            std::printf("Events::initGameEvent called\n");
            if (!theInputManager.Initialize())
            {
                MessageBox(0, "Direct Input Initialization Failed", "Error", MB_OK);
                return;
            }

            theInputManager.RegisterKeyBoardCallBack(std::bind(&Objects::OnKeyPress, this,
                std::placeholders::_1, std::placeholders::_2));
        };

        // Initialise your plugin here
        Events::gameProcessEvent += [&]
        {
            theInputManager.ProcessInput();
        };
    };

    /*
    void CEntity_UpdateRW_(CEntity * pEntity)
    {
        if (pEntity->m_pRwObject)
        {
            if (pEntity->m_matrix)
            {
                pEntity->m_matrix->UpdateRW(&((RwFrame*)pEntity->m_pRwObject->parent)->modelling);
            }
            else
            {
                RwMatrix theMatrix;
                pEntity->m_placement.UpdateRwMatrix(&theMatrix);
            }
        }
    }*/

    void OnKeyPress(unsigned char key, PressState state)
    {
        if (state == PRESS_DOWN)
        {
            switch (key)
            {
            case DIK_1:
            {
                CPlayerPed* pLocalPlayer = FindPlayerPed();
                if (pLocalPlayer)
                {
                    std::printf("ok craete now\n");
                    DWORD objectID = 97; // SA: 3110, VC: 591, III: 1353
                    CVector position = pLocalPlayer->GetPosition(); //->TransformFromObjectSpace(CVector(0.0f, 5.0f, 0.0f));
                    position.y += 5.0f; 

                    CObject* pObject = new CObject(objectID, true);
                    pObject->m_nObjectType = OBJECT_MISSION;
                    if (position.z <= -100.0)
                    {
                        position.z = CWorld::FindGroundZForCoord(position.x, position.y);
                    }
                    position.z = pObject->GetDistanceFromCentreOfMassToBaseOfModel() + position.z;
                    pObject->m_matrix.SetRotate(0.0, 0.0, 0.0);
                    pObject->SetPosition(position.x, position.y, position.z);
                    pObject->m_matrix.UpdateRW();
                    pObject->UpdateRwFrame();
                 
                    // Make the object static, so it does not move by enabling appropriate flags
                    *reinterpret_cast<unsigned char*>(&pObject->m_nFlags) = 0xFF;

                    CWorld::Add(pObject);
                }
                break;
            }
            }
        }
    }


private:
    InputManager      theInputManager;
} objects;
